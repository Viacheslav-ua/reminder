export default function HomePage() {
  return (
    <>
    <h2 className="text-2xl font-bold text-sky-900 my-10 text-center">Вопросы</h2>
    <ol className="list-decimal ml-10">
      <li className="mb-2">
        <a href="#OOP" className="text-violet-600">Основные принципы ООП.</a>
        <br />
        Наследование, Инкапсуляция, Абстракция?, Полиморфизм. (Своими словами) 	Примеры.
      </li>
      <li className="mb-4">От какого класса наследуются все классы в .NET?</li>
      <li className="mb-4">Множественное наследование в С#.</li>
      <li className="mb-4">REST понятие?</li>
      <li className="mb-4">Обработка исключительных ситуаций. Exception. (Когда надо / не надо кидать.)</li>
      <li className="mb-4">Сборщик мусора. Garbage Collector. <br /> (Когда используем и используем ли. Каким образом влияет на код. Что нужно знать разработчикам.)</li>
      <li className="mb-4">
        Типы данный, коллекции, структуры данных.<br />
        Что Тип Значения а что Тип Ссылки. (Почему данные изменились при передаче по 	ссылке фнкции.)<br />
	      Что из этого Class а что Struct. В каком участке памяти они хранятся. 
      </li>
      <li className="mb-4">Что такое Boxing/Unboxing.</li>
      <li className="mb-4">
        Коллекции. Какие бывают? Для чего используются? В чем отличие? В чем преимущества?<br />
        Какую использовать в каком случае?
      </li>
      <li className="mb-4">Чем отличается Абстрактный класс от Интерфейса? Зачем нужны Интерфейсы? Какие задачи выполняют?</li>
      <li className="mb-4">Разница между Структурой и Классом. Для чего что используется? Примеры структур.</li>
      <li className="mb-4">Что такое асинхронность и чем отличается от многопоточности?</li>
      <li className="mb-4">Какие типы JOIN существуют в SQL? Отличия преимущества недостатки разых JOIN.<br />
         В каких случаях что используется.</li>
      <li className="mb-4">Зачем нужны Unit тесты вообще. Какие преимущества и недостатки использования Unt-тестов. Как влияют на написание кода. Из каких частей состоят. Из каких трех логических блоков состоят Unit-тесты.</li>
        </ol>

    <h2 id="OOP" className="text-2xl font-bold text-sky-900 my-10 text-center">1. Основные принципы ООП</h2>

    <ol className="list-decimal ml-10">
      <li>Абстракция. Моделирование требуемых атрибутов и взаимодействий сущностей в виде классов для определения абстрактного представления системы.</li>
      <li>Инкапсуляция. Скрытие внутреннего состояния и функций объекта и предоставление доступа только через открытый набор функций.</li>
      <li>Наследование. Возможность создания новых абстракций на основе существующих.</li>
      <li>Полиморфизм. Возможность реализации наследуемых свойств или методов отличающимися способами в рамках множества абстракций.</li>
    </ol>
<div>
 
1.

Полиморфизм имеет множество видов и множество вариантов реализации.
Один интерфейс — много реализаций - ad hoc-полиморфизм.

Полиморфизм — механизм позволяющий использовать одно и то же имя (метода) для реализации технически разных задач.
Примеры ad hoc-полиморфизма: (перегрузка (overloading) метода, переопределение (overriding) виртуального метода, )



2. Классы в .NET наследуются от Object



10.

Задача интерфейса — определить контракт взаимодействия между классами. (С помощью интерфейса мы определяем поведение которое в последствии будет реализовано в каком то классе) 
В отличие от абстрактных классов задача интерфейса заключается именно только в определении этих контрактов и того как себя должны вести наследники без конкретных деталей.
Главное отличие от класса в том, что интерфейсы позволяют множественное наследование.
Интерфейсы наследуются между собой причем один И может наследовать несколько разных.
Класс реализует интерфейс – правильный термин.
Интерфейс не имеет конструктора в отличие от абстрактного класса.
</div>

    </>
  );
}